/*
 * Copyright 2019, GeoSolutions Sas.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree.
 */

import * as geostory from './geostory';
import * as geostore from './geostore';
import { Observable } from 'rxjs';

let registry = {
    'geostory': geostory,
    'geostore': geostore
};

export const registerMediaAPI = (key, api) => {
    registry[key] = api;
};

export default (source) => {

    const mediaApiInterface = {
        /**
         * load data for selected media type
         * @returns {Observable} a stream that emits an array of object with the following shape:
         * ```json
         * {
         *     "resources": [{ id, type, data }],
         *     "totalCount": 1,
         * }
         * ```
         */
        load: () => Observable.empty(),
        /**
         * Saves a media with passed data and returns the object shaped as {id, mediaType, data, source}
         * @param {string} mediaType type of the media (image, video...)
         * @param {object} source source object
         * @param {object} data the effective media data
         * @returns {Observable} a stream that emit an object like this
         * ```
         * {
         *   id, // generated by the service
         *   mediaType, // original media type
         *   data, // effective media object data
         *   source // source object
         * }
         * ```
         */
        save: () => Observable.empty(),
        /**
         * Updates a media with passed data and returns the object shaped as {id, mediaType, data, source}
         * @param {string} mediaType type of the media (image, video...)
         * @param {object} source source object
         * @param {object} data the effective media data
         * @returns {Observable} a stream that emit an object like this
         * ```
         * {
         *   id, // generated by the service
         *   mediaType, // original media type
         *   data, // effective media object data
         *   source // source object
         * }
         * ```
         */
        edit: () => Observable.empty(), // only implementation for geostory and geostore
        /**
         * Delete a media and returns the object shaped as {id, mediaType, source}
         * @param {string} mediaType type of the media (image, video...)
         * @param {object} store redux store middleware object (with dispatch and getStore method)
         * @returns {Observable} a stream that emit an object like this
         * ```
         * {
         *   "id", // of the deleted resource
         *   "mediaType": image | map,
         * }
         * ```
         */
        remove: () => Observable.empty(),
        /**
         * Get data of a selected media resource.
         * If getData is a function that return an Observable of null
         * the Media Editor will use the current selectedItem without updates.
         * @param {string} store redux store middleware object (with dispatch and getStore method)
         * @param {object} options
         * @param {object} options.selectedItem the current selected item resource shaped as { id, type, data }
         * @returns {Observable} a stream that emit an the data object of a resource
         * ```
         * {
         *   "id", // of the deleted resource
         *   "type": "map",
         *   // ... resource data
         * }
         * ```
         */
        getData: () => Observable.of(null)
    };

    const mediaApi = registry[source.type];

    if (mediaApi?.create) {
        return {
            ...mediaApiInterface,
            ...mediaApi.create(source)
        };
    }

    return {
        ...mediaApiInterface,
        ...mediaApi
    };
}; // TODO: support other kinds of media types and sources
